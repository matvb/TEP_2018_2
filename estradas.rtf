{\rtf1\ansi\ansicpg1252\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww25400\viewh16000\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Entrada:\
- um array com \'93n\'94 inteiros, representando \
  a quantidade de habitantes em cada cidade (sabe-se que \'93q\'94 delas s\'e3o metr\'f3poles)\
- \'93m\'94 estradas ligando cidades (formato a definir)\
- nenhuma cidade \'e9 vizinha de mais do que outras \'93delta\'94 cidades\
Ex.: lista de arestas\
1, 5\
8, 19\
15, 310\
\
Ex.: listas de adjac\'eancias\
1: 2, 3, 7, 9\
2: 1, 5\
3: 1, 4, 19\
\
Ex.: uma matriz booleana onde a posi\'e7\'e3o [i, j] \
       indica se h\'e1 estrada entre i e j\
\
metr\'f3poles s\'e3o cidades com mais de 1M habitantes\
\
Pergunta: quantas estradas ligam duas metr\'f3poles?\
\
Algoritmo 1: para cada metr\'f3pole, pergunte se cada vizinho seu \'e9 uma metr\'f3pole\
   Complexidade: O(n^2) , na verdade O(n + Min\{q delta, m\})\
\
Algoritmo 2: para cada par de metr\'f3poles, pergunte se h\'e1 uma estrada entre elas\
   Complexidade: O(n + q^2)\
\
Algoritmo 3: para cada estrada, pergunta se as duas pontas s\'e3o metr\'f3poles\
   Complexidade: O(m)\
}